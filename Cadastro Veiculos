import { useState } from 'react';
import BaseLayout from '@/components/layouts/base-layout';

export default function CadastroVeiculo() {
  const [formData, setFormData] = useState({
    placa: '',
    modelo: '',
    marca: '',
    ano: '',
    combustivel: '',
    capacidadeTanque: '',
    odometro: '',
    status: 'ativo',
    seguro: '',
    documentacao: '',
    historico: '',
    fotos: [] as File[],
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFormData({ ...formData, fotos: Array.from(e.target.files) });
    }
  };

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.placa) newErrors.placa = 'Placa é obrigatória';
    if (!formData.modelo) newErrors.modelo = 'Modelo é obrigatório';
    if (!formData.marca) newErrors.marca = 'Marca é obrigatória';
    if (!formData.ano || isNaN(Number(formData.ano))) newErrors.ano = 'Ano inválido';
    if (!formData.combustivel) newErrors.combustivel = 'Tipo de combustível é obrigatório';
    if (!formData.capacidadeTanque || isNaN(Number(formData.capacidadeTanque))) newErrors.capacidadeTanque = 'Informe a capacidade correta';
    if (!formData.odometro || isNaN(Number(formData.odometro))) newErrors.odometro = 'Odômetro deve ser um número';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;
    console.log('Formulário válido:', formData);
  };

  return (
    <BaseLayout>
      <div className="max-w-4xl mx-auto p-6 bg-white shadow rounded-lg mt-6">
        <h2 className="text-2xl font-bold text-gray-800 mb-6">Cadastro de Veículo</h2>
        <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {['placa', 'modelo', 'marca', 'ano'].map((field) => (
            <div key={field}>
              <label className="block font-medium mb-1 capitalize">{field} *</label>
              <input
                name={field}
                type={field === 'ano' ? 'number' : 'text'}
                value={formData[field as keyof typeof formData] as string}
                onChange={handleInputChange}
                className="w-full border rounded px-3 py-2"
              />
              {errors[field] && <p className="text-red-500 text-sm">{errors[field]}</p>}
            </div>
          ))}

          <div>
            <label className="block font-medium mb-1">Tipo de Combustível *</label>
            <select
              name="combustivel"
              value={formData.combustivel}
              onChange={handleInputChange}
              className="w-full border rounded px-3 py-2"
            >
              <option value="">Selecione</option>
              <option value="gasolina">Gasolina</option>
              <option value="etanol">Etanol</option>
              <option value="diesel">Diesel</option>
              <option value="flex">Flex</option>
              <option value="eletrico">Elétrico</option>
            </select>
            {errors.combustivel && <p className="text-red-500 text-sm">{errors.combustivel}</p>}
          </div>

          <div>
            <label className="block font-medium mb-1">Capacidade do Tanque (L) *</label>
            <input
              name="capacidadeTanque"
              type="number"
              value={formData.capacidadeTanque}
              onChange={handleInputChange}
              className="w-full border rounded px-3 py-2"
            />
            {errors.capacidadeTanque && <p className="text-red-500 text-sm">{errors.capacidadeTanque}</p>}
          </div>

          <div>
            <label className="block font-medium mb-1">Odômetro Atual (km) *</label>
            <input
              name="odometro"
              type="number"
              value={formData.odometro}
              onChange={handleInputChange}
              className="w-full border rounded px-3 py-2"
            />
            {errors.odometro && <p className="text-red-500 text-sm">{errors.odometro}</p>}
          </div>

          <div>
            <label className="block font-medium mb-1">Status</label>
            <select
              name="status"
              value={formData.status}
              onChange={handleInputChange}
              className="w-full border rounded px-3 py-2"
            >
              <option value="ativo">Ativo</option>
              <option value="inativo">Inativo</option>
              <option value="manutencao">Manutenção</option>
            </select>
          </div>

          <div className="md:col-span-2">
            <label className="block font-medium mb-1">Fotos do Veículo</label>
            <input
              type="file"
              accept="image/*"
              multiple
              onChange={handleFileChange}
              className="w-full"
            />
          </div>

          <div className="md:col-span-2">
            <label className="block font-medium mb-1">Dados do Seguro</label>
            <textarea
              name="seguro"
              value={formData.seguro}
              onChange={handleInputChange}
              className="w-full border rounded px-3 py-2"
              rows={3}
            />
          </div>

          <div className="md:col-span-2">
            <label className="block font-medium mb-1">Documentação</label>
            <textarea
              name="documentacao"
              value={formData.documentacao}
              onChange={handleInputChange}
              className="w-full border rounded px-3 py-2"
              rows={3}
            />
          </div>

          <div className="md:col-span-2">
            <label className="block font-medium mb-1">Histórico Resumido de Manutenções</label>
            <textarea
              name="historico"
              value={formData.historico}
              onChange={handleInputChange}
              className="w-full border rounded px-3 py-2"
              rows={4}
            />
          </div>

          <div className="md:col-span-2 flex justify-end mt-4">
            <button
              type="submit"
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md font-medium transition"
            >
              Salvar Veículo
            </button>
          </div>
        </form>
      </div>
    </BaseLayout>
  );
}
